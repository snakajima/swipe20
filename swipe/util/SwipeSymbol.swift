//
//  SwipeSymbol.swift
//  swipe_dev
//
//  Created by SATOSHI NAKAJIMA on 10/4/20.
//

import SwiftUI
import CoreGraphics
#if os(macOS)
    import AppKit
    public typealias OSFont = NSFont
#elseif os(iOS) || os(tvOS)
    import UIKit
    public typealias OSFont = UIFont
#endif

let s_trash:[String:Any] = [
    "path":"M 46.4844 32.4707 L 104.98 32.4707 C 116.895 32.4707 123.926 26.3672 124.463 14.3555 L 128.369 -73.1445 L 133.105 -73.1445 C 138.086 -73.1445 141.748 -76.6113 141.748 -81.5918 C 141.748 -86.4746 138.086 -89.8926 133.105 -89.8926 L 107.666 -89.8926 L 107.666 -98.584 C 107.666 -110.059 100.635 -116.309 87.6465 -116.309 L 63.7207 -116.309 C 50.7324 -116.309 43.7012 -110.059 43.7012 -98.584 L 43.7012 -89.8926 L 18.3105 -89.8926 C 13.3301 -89.8926 9.66797 -86.4746 9.66797 -81.5918 C 9.66797 -76.6113 13.3301 -73.1445 18.3105 -73.1445 L 23.0469 -73.1445 L 26.9531 14.3555 C 27.4902 26.416 34.4727 32.4707 46.4844 32.4707 Z M 61.1816 -98.1445 C 61.1816 -100.195 62.6465 -101.465 65.0879 -101.465 L 86.2793 -101.465 C 88.7207 -101.465 90.1855 -100.195 90.1855 -98.1445 L 90.1855 -89.8926 L 61.1816 -89.8926 Z M 49.0234 15.3809 C 45.9473 15.3809 44.2383 13.3789 44.0918 9.66797 L 40.2832 -73.1445 L 111.035 -73.1445 L 107.324 9.66797 C 107.178 13.3789 105.518 15.3809 102.393 15.3809 Z M 57.4707 7.4707 C 61.1328 7.4707 63.4277 5.12695 63.2812 1.66016 L 61.4746 -59.375 C 61.377 -62.7441 59.0332 -65.0391 55.4688 -65.0391 C 51.9531 -65.0391 49.707 -62.7441 49.8535 -59.2773 L 51.6602 1.80664 C 51.8066 5.17578 54.1504 7.4707 57.4707 7.4707 Z M 75.7324 7.4707 C 79.1504 7.4707 81.4941 5.22461 81.4941 1.85547 L 81.4941 -59.4238 C 81.4941 -62.793 79.1504 -65.0391 75.7324 -65.0391 C 72.2656 -65.0391 69.9219 -62.793 69.9219 -59.4238 L 69.9219 1.85547 C 69.9219 5.22461 72.2656 7.4707 75.7324 7.4707 Z M 93.9453 7.4707 C 97.2656 7.4707 99.6094 5.17578 99.7559 1.80664 L 101.562 -59.2773 C 101.709 -62.7441 99.4629 -65.0391 95.9473 -65.0391 C 92.4316 -65.0391 90.0391 -62.7441 89.9414 -59.375 L 88.1348 1.66016 C 87.9883 5.12695 90.2832 7.4707 93.9453 7.4707 Z"
]

let s_gearshape:[String:Any] = [
    "path":"M 76.8066 36.7188 L 89.7461 36.7188 C 96.2891 36.7188 101.611 32.5195 103.027 26.3672 L 105.127 17.4316 L 105.42 17.334 L 113.232 22.1191 C 118.701 25.4395 125.391 24.5117 129.932 19.873 L 138.867 11.0352 C 143.506 6.20117 144.287 -0.390625 140.967 -5.66406 L 136.182 -13.3789 L 136.279 -13.6719 L 145.068 -15.7715 C 151.172 -17.334 155.322 -22.6562 155.322 -29.0527 L 155.322 -41.3574 C 155.322 -47.7539 151.221 -53.125 145.068 -54.6387 L 136.328 -56.7871 L 136.182 -57.0801 L 140.967 -64.7949 C 144.336 -70.1172 143.506 -76.6602 138.867 -81.4941 L 129.932 -90.3809 C 125.439 -95.0195 118.75 -95.9473 113.281 -92.627 L 105.469 -87.8418 L 105.127 -87.9883 L 103.027 -96.9238 C 101.611 -103.076 96.2891 -107.275 89.7461 -107.275 L 76.8066 -107.275 C 70.3125 -107.275 64.9902 -102.979 63.5254 -96.9238 L 61.4746 -87.9883 L 61.084 -87.8418 L 53.2715 -92.627 C 47.8516 -95.8984 41.1621 -95.0195 36.6699 -90.3809 L 27.7344 -81.4941 C 23.0957 -76.6602 22.2168 -70.1172 25.6348 -64.7949 L 30.4199 -57.0801 L 30.2734 -56.7871 L 21.4844 -54.6387 C 15.332 -53.0762 11.2793 -47.7539 11.2793 -41.3574 L 11.2793 -29.0527 C 11.2793 -22.6562 15.3809 -17.2852 21.4844 -15.7715 L 30.3223 -13.6719 L 30.4199 -13.3789 L 25.6348 -5.66406 C 22.2656 -0.390625 23.0957 6.20117 27.7344 11.0352 L 36.6699 19.873 C 41.2109 24.5117 47.9004 25.4395 53.3203 22.1191 L 61.1328 17.334 L 61.4746 17.4316 L 63.5254 26.3672 C 64.9902 32.5195 70.3125 36.7188 76.8066 36.7188 Z M 80.2734 19.5312 C 79.3457 19.5312 78.9551 19.043 78.8086 18.2617 L 75.1953 3.07617 C 70.6055 2.24609 65.9668 0.292969 61.7188 -2.53906 L 48.3398 5.61523 C 47.7051 6.05469 47.0215 6.05469 46.3867 5.46875 L 42.1875 1.26953 C 41.5039 0.634766 41.6504 -0.0488281 41.9922 -0.683594 L 50.293 -14.0625 C 47.6074 -18.3105 45.7031 -22.8027 44.873 -27.2949 L 29.6875 -30.8594 C 28.9062 -31.0059 28.418 -31.3965 28.418 -32.373 L 28.418 -38.0859 C 28.418 -39.0625 28.9062 -39.4043 29.6875 -39.5508 L 44.873 -43.1152 C 45.8008 -47.7051 47.6074 -52.3438 50.2441 -56.4453 L 41.9922 -69.8242 C 41.6016 -70.459 41.4551 -71.0938 42.1387 -71.7773 L 46.3867 -75.9277 C 47.0215 -76.5137 47.6074 -76.5625 48.3398 -76.123 L 61.6699 -67.9688 C 64.9902 -70.3613 70.3125 -72.6074 75.1953 -73.6328 L 78.8086 -88.8184 C 78.9551 -89.5996 79.3457 -90.0391 80.2734 -90.0391 L 86.2793 -90.0391 C 87.2559 -90.0391 87.6465 -89.5996 87.793 -88.8184 L 91.4062 -73.584 C 96.1914 -72.6562 100.83 -70.6543 104.932 -67.9688 L 118.115 -75.9766 C 118.848 -76.416 119.385 -76.4648 120.068 -75.8301 L 124.365 -71.6797 C 125 -70.9961 124.902 -70.3613 124.463 -69.6777 L 116.309 -56.4453 C 118.945 -52.3926 120.801 -47.7051 121.68 -43.2129 L 136.914 -39.5508 C 137.695 -39.4043 138.135 -39.0625 138.135 -38.0859 L 138.135 -32.373 C 138.135 -31.3965 137.695 -31.0059 136.914 -30.8594 L 121.631 -27.2461 C 120.85 -22.8516 118.945 -18.1152 116.26 -14.0625 L 124.463 -0.78125 C 124.854 -0.146484 124.951 0.488281 124.316 1.12305 L 120.068 5.32227 C 119.385 6.00586 118.799 5.95703 118.115 5.51758 L 104.932 -2.53906 C 100.488 0.292969 96.5332 2.09961 91.4062 3.07617 L 87.793 18.2617 C 87.6465 19.043 87.2559 19.5312 86.2793 19.5312 Z M 83.3008 -11.6699 C 96.1914 -11.6699 106.787 -22.3145 106.787 -35.2539 C 106.787 -48.1445 96.1914 -58.6914 83.3008 -58.6914 C 70.3613 -58.6914 59.7168 -48.1445 59.7168 -35.2539 C 59.7168 -22.2656 70.3613 -11.6699 83.3008 -11.6699 Z M 83.3008 -26.416 C 78.4668 -26.416 74.5117 -30.4199 74.5117 -35.2539 C 74.5117 -40.0391 78.5156 -43.9453 83.3008 -43.9453 C 87.9883 -43.9453 91.8945 -39.9902 91.8945 -35.2539 C 91.8945 -30.4199 87.9883 -26.416 83.3008 -26.416 Z"
]

struct SwipeSymbol: View {
    //let script:[String:Any]
    let path:CGPath
    let bound:CGRect
    static let emtyPath = CGPath(rect: .zero, transform: nil)
    init(script:[String:Any]) {
        path = SwipePath.parse(script["path"]) ?? Self.emtyPath
        bound = path.boundingBoxOfPath
    }
    func scaleToFit(_ size:CGSize) -> CGFloat {
        return min(size.height / bound.height, size.width / bound.width) * 0.8
    }
    public var body: some View {
        GeometryReader { geometry in
            let scale = scaleToFit(geometry.size)
            var xf = CGAffineTransform(scaleX: scale, y: scale)
            Path(path.copy(using: &xf) ?? Self.emtyPath)
        }.alignmentGuide(.firstTextBaseline, computeValue: { d in
            return 0
        }).alignmentGuide(VerticalAlignment.center, computeValue: { d in
            let scale = scaleToFit(CGSize(width: d.width, height: d.height))
            return scale * (bound.maxY - bound.height / 2)
        })
    }
}

extension SwipeSymbol {
    static var trash:SwipeSymbol {
        return SwipeSymbol(script: s_trash)
    }
    static var gearshape:SwipeSymbol {
        return SwipeSymbol(script: s_gearshape)
    }
}

struct SwipeSymbol_Previews: PreviewProvider {
    static let bigFont = OSFont.systemFont(ofSize: 70)
    static let smallFont = OSFont.systemFont(ofSize: 24)
    static var previews: some View {
        VStack {
            Text("Hello")
            HStack(alignment: .center, spacing: 0) {
                Text("Hello")
                Rectangle().frame(width:70, height:70)
                SwipeSymbol.trash.frame(width:70, height:70)
                Text("Hello").font(Font(bigFont))
            }
            HStack(alignment: .firstTextBaseline, spacing: 0) {
                Text("Hello")
                Rectangle().frame(width:70, height:70)
                SwipeSymbol.trash.frame(width:70, height:70)
                Text("Hello").font(Font(bigFont))
            }
            HStack(alignment: .bottom, spacing: 0) {
                Text("Hello")
                Rectangle().frame(width:70, height:70)
                SwipeSymbol.trash.frame(width:70, height:70)
                Text("Hello").font(Font(bigFont))
            }
            Text("Hello")
        }
    }
}
